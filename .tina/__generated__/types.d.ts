//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  news: News;
  newsConnection: NewsConnection;
  featured_articles: Featured_Articles;
  featured_articlesConnection: Featured_ArticlesConnection;
  ev_groups_in_denmark: Ev_Groups_In_Denmark;
  ev_groups_in_denmarkConnection: Ev_Groups_In_DenmarkConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryNewsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryNewsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<NewsFilter>;
};


export type QueryFeatured_ArticlesArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryFeatured_ArticlesConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<Featured_ArticlesFilter>;
};


export type QueryEv_Groups_In_DenmarkArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryEv_Groups_In_DenmarkConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<Ev_Groups_In_DenmarkFilter>;
};

export type DocumentFilter = {
  news?: InputMaybe<NewsFilter>;
  featured_articles?: InputMaybe<Featured_ArticlesFilter>;
  ev_groups_in_denmark?: InputMaybe<Ev_Groups_In_DenmarkFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = News | Featured_Articles | Ev_Groups_In_Denmark;

export type News = Node & Document & {
  __typename?: 'News';
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type NewsFilter = {
  body?: InputMaybe<RichTextFilter>;
};

export type NewsConnectionEdges = {
  __typename?: 'NewsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<News>;
};

export type NewsConnection = Connection & {
  __typename?: 'NewsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<NewsConnectionEdges>>>;
};

export type Featured_Articles = Node & Document & {
  __typename?: 'Featured_articles';
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type Featured_ArticlesFilter = {
  body?: InputMaybe<RichTextFilter>;
};

export type Featured_ArticlesConnectionEdges = {
  __typename?: 'Featured_articlesConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Featured_Articles>;
};

export type Featured_ArticlesConnection = Connection & {
  __typename?: 'Featured_articlesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<Featured_ArticlesConnectionEdges>>>;
};

export type Ev_Groups_In_Denmark = Node & Document & {
  __typename?: 'Ev_groups_in_denmark';
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type Ev_Groups_In_DenmarkFilter = {
  body?: InputMaybe<RichTextFilter>;
};

export type Ev_Groups_In_DenmarkConnectionEdges = {
  __typename?: 'Ev_groups_in_denmarkConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Ev_Groups_In_Denmark>;
};

export type Ev_Groups_In_DenmarkConnection = Connection & {
  __typename?: 'Ev_groups_in_denmarkConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<Ev_Groups_In_DenmarkConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateNews: News;
  createNews: News;
  updateFeatured_articles: Featured_Articles;
  createFeatured_articles: Featured_Articles;
  updateEv_groups_in_denmark: Ev_Groups_In_Denmark;
  createEv_groups_in_denmark: Ev_Groups_In_Denmark;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateNewsArgs = {
  relativePath: Scalars['String'];
  params: NewsMutation;
};


export type MutationCreateNewsArgs = {
  relativePath: Scalars['String'];
  params: NewsMutation;
};


export type MutationUpdateFeatured_ArticlesArgs = {
  relativePath: Scalars['String'];
  params: Featured_ArticlesMutation;
};


export type MutationCreateFeatured_ArticlesArgs = {
  relativePath: Scalars['String'];
  params: Featured_ArticlesMutation;
};


export type MutationUpdateEv_Groups_In_DenmarkArgs = {
  relativePath: Scalars['String'];
  params: Ev_Groups_In_DenmarkMutation;
};


export type MutationCreateEv_Groups_In_DenmarkArgs = {
  relativePath: Scalars['String'];
  params: Ev_Groups_In_DenmarkMutation;
};

export type DocumentUpdateMutation = {
  news?: InputMaybe<NewsMutation>;
  featured_articles?: InputMaybe<Featured_ArticlesMutation>;
  ev_groups_in_denmark?: InputMaybe<Ev_Groups_In_DenmarkMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  news?: InputMaybe<NewsMutation>;
  featured_articles?: InputMaybe<Featured_ArticlesMutation>;
  ev_groups_in_denmark?: InputMaybe<Ev_Groups_In_DenmarkMutation>;
};

export type NewsMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};

export type Featured_ArticlesMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};

export type Ev_Groups_In_DenmarkMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};


export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
  
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  